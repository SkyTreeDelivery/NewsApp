package com.example.hp.materialdesign.greenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.hp.materialdesign.domain.Join.UserJoinNewsBrowse;
import com.example.hp.materialdesign.domain.Join.UserJoinNewsColl;
import com.example.hp.materialdesign.domain.Join.UserJoinNewsComment;
import java.util.List;

import com.example.hp.materialdesign.domain.NewsDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_DETAIL".
*/
public class NewsDetailDao extends AbstractDao<NewsDetail, Long> {

    public static final String TABLENAME = "NEWS_DETAIL";

    /**
     * Properties of entity NewsDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Nid = new Property(1, String.class, "nid", false, "NID");
        public final static Property ChannelId = new Property(2, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property AllText = new Property(8, String.class, "allText", false, "ALL_TEXT");
    }

    private DaoSession daoSession;

    private final StringConverter allTextConverter = new StringConverter();
    private Query<NewsDetail> user_NewsDetailsQuery;
    private Query<NewsDetail> user_BrowseNewsDetailsQuery;
    private Query<NewsDetail> user_CommentNewsDetailsQuery;

    public NewsDetailDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NID\" TEXT UNIQUE ," + // 1: nid
                "\"CHANNEL_ID\" TEXT," + // 2: channelId
                "\"TITLE\" TEXT," + // 3: title
                "\"LINK\" TEXT," + // 4: link
                "\"SOURCE\" TEXT," + // 5: source
                "\"DESC\" TEXT," + // 6: desc
                "\"DATE\" INTEGER," + // 7: date
                "\"ALL_TEXT\" TEXT);"); // 8: allText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
 
        List allText = entity.getAllText();
        if (allText != null) {
            stmt.bindString(9, allTextConverter.convertToDatabaseValue(allText));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(3, channelId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
 
        List allText = entity.getAllText();
        if (allText != null) {
            stmt.bindString(9, allTextConverter.convertToDatabaseValue(allText));
        }
    }

    @Override
    protected final void attachEntity(NewsDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public NewsDetail readEntity(Cursor cursor, int offset) {
        NewsDetail entity = new NewsDetail( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.isNull(offset + 8) ? null : allTextConverter.convertToEntityProperty(cursor.getString(offset + 8)) // allText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsDetail entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setAllText(cursor.isNull(offset + 8) ? null : allTextConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsDetail entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "newsDetails" to-many relationship of User. */
    public List<NewsDetail> _queryUser_NewsDetails(Long userId) {
        synchronized (this) {
            if (user_NewsDetailsQuery == null) {
                QueryBuilder<NewsDetail> queryBuilder = queryBuilder();
                queryBuilder.join(UserJoinNewsColl.class, UserJoinNewsCollDao.Properties.NewsId)
                    .where(UserJoinNewsCollDao.Properties.UserId.eq(userId));
                user_NewsDetailsQuery = queryBuilder.build();
            }
        }
        Query<NewsDetail> query = user_NewsDetailsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "browseNewsDetails" to-many relationship of User. */
    public List<NewsDetail> _queryUser_BrowseNewsDetails(Long userId) {
        synchronized (this) {
            if (user_BrowseNewsDetailsQuery == null) {
                QueryBuilder<NewsDetail> queryBuilder = queryBuilder();
                queryBuilder.join(UserJoinNewsBrowse.class, UserJoinNewsBrowseDao.Properties.NewsId)
                    .where(UserJoinNewsBrowseDao.Properties.UserId.eq(userId));
                user_BrowseNewsDetailsQuery = queryBuilder.build();
            }
        }
        Query<NewsDetail> query = user_BrowseNewsDetailsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "commentNewsDetails" to-many relationship of User. */
    public List<NewsDetail> _queryUser_CommentNewsDetails(Long userId) {
        synchronized (this) {
            if (user_CommentNewsDetailsQuery == null) {
                QueryBuilder<NewsDetail> queryBuilder = queryBuilder();
                queryBuilder.join(UserJoinNewsComment.class, UserJoinNewsCommentDao.Properties.NewsId)
                    .where(UserJoinNewsCommentDao.Properties.UserId.eq(userId));
                user_CommentNewsDetailsQuery = queryBuilder.build();
            }
        }
        Query<NewsDetail> query = user_CommentNewsDetailsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
