package com.example.hp.materialdesign.greenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.hp.materialdesign.domain.ImageUrl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_URL".
*/
public class ImageUrlDao extends AbstractDao<ImageUrl, Long> {

    public static final String TABLENAME = "IMAGE_URL";

    /**
     * Properties of entity ImageUrl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property NewsId = new Property(1, long.class, "newsId", false, "NEWS_ID");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Positon = new Property(3, int.class, "positon", false, "POSITON");
        public final static Property Height = new Property(4, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(5, int.class, "weight", false, "WEIGHT");
    }

    private Query<ImageUrl> newsDetail_ImageurlsQuery;

    public ImageUrlDao(DaoConfig config) {
        super(config);
    }
    
    public ImageUrlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_URL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NEWS_ID\" INTEGER NOT NULL ," + // 1: newsId
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"POSITON\" INTEGER NOT NULL ," + // 3: positon
                "\"HEIGHT\" INTEGER NOT NULL ," + // 4: height
                "\"WEIGHT\" INTEGER NOT NULL );"); // 5: weight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_URL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImageUrl entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNewsId());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getPositon());
        stmt.bindLong(5, entity.getHeight());
        stmt.bindLong(6, entity.getWeight());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImageUrl entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNewsId());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
        stmt.bindLong(4, entity.getPositon());
        stmt.bindLong(5, entity.getHeight());
        stmt.bindLong(6, entity.getWeight());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ImageUrl readEntity(Cursor cursor, int offset) {
        ImageUrl entity = new ImageUrl( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // newsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.getInt(offset + 3), // positon
            cursor.getInt(offset + 4), // height
            cursor.getInt(offset + 5) // weight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImageUrl entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNewsId(cursor.getLong(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPositon(cursor.getInt(offset + 3));
        entity.setHeight(cursor.getInt(offset + 4));
        entity.setWeight(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImageUrl entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImageUrl entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImageUrl entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "imageurls" to-many relationship of NewsDetail. */
    public List<ImageUrl> _queryNewsDetail_Imageurls(long newsId) {
        synchronized (this) {
            if (newsDetail_ImageurlsQuery == null) {
                QueryBuilder<ImageUrl> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NewsId.eq(null));
                newsDetail_ImageurlsQuery = queryBuilder.build();
            }
        }
        Query<ImageUrl> query = newsDetail_ImageurlsQuery.forCurrentThread();
        query.setParameter(0, newsId);
        return query.list();
    }

}
